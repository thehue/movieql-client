{"version":3,"sources":["apolloClient.js","queries.js","Movie.js","Home.js","Detail.js","App.js","globalStyles.js","index.js"],"names":["client","ApolloClient","uri","HOME_PAGE","gql","DETAIL_PAGE","Card","styled","div","props","background","Title","span","Movie","id","title","rating","poster","to","Container","Home","query","loading","data","error","movies","map","movie","key","title_long","medium_cover_image","Image","withComponent","h1","Paragraph","bold","MovieContainer","Detail","movieId","match","params","parseInt","variables","src","description_intro","suggestions","App","basename","exact","path","component","React","Component","createGlobalStyle","reset","ReactDOM","render","document","getElementById"],"mappings":"0QAOeA,EALA,I,MAAIC,GAAa,CAE5BC,IAAK,2B,gwBCFF,IAAMC,EAAYC,IAAH,KAcTC,EAAcD,IAAH,K,0oBCXxB,IAAME,EAAOC,UAAOC,IAAV,IAGY,SAAAC,GAAK,oBAAWA,EAAMC,WAAjB,OASrBC,EAAQJ,UAAOK,KAAV,KA6BIC,EAjBD,SAAC,GAAD,IAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,OAAQC,EAAtB,EAAsBA,OAAtB,OACZ,kBAAC,IAAD,CAAMC,GAAE,mBAAcJ,IACpB,kBAACR,EAAD,CAAMI,WAAYO,GAChB,kBAACN,EAAD,KACGI,EADH,MACaC,EADb,mB,mLC1BN,IAAMG,EAAYZ,UAAOC,IAAV,KA6BAY,EAtBF,kBACL,kBAAC,IAAD,CAAOC,MAAOlB,GAEV,YAA8B,IAA3BmB,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MACtB,OAAGF,EAAgB,uCAChBE,EAAc,qCACdD,EACQ,kBAACJ,EAAD,KACNI,EAAKE,OAAOC,IAAI,SAAAC,GAAK,OAClB,kBAAC,EAAD,CACAC,IAAKD,EAAMb,GACXA,GAAIa,EAAMb,GACVC,MAAOY,EAAME,WACbZ,OAAQU,EAAMG,mBACdd,OAAQW,EAAMX,iBARtB,K,u0BCbR,IAAMG,EAAYZ,UAAOC,IAAV,KAaTuB,EANOxB,UAAOC,IAAV,KAMSwB,cAAc,OAE3BrB,EAAQJ,UAAO0B,GAAV,KAMLC,EAAY3B,UAAOK,KAAV,IAGE,SAAAH,GAAK,OAAKA,EAAM0B,KAAO,MAAQ,QAG1CC,EAAiB7B,UAAOC,IAAV,KAkDL6B,EA1CA,SAAC,GAAwC,IAAnBC,EAAkB,EAArCC,MAASC,OAAUF,QAC7BxB,EAAK2B,SAASH,GAElB,OACI,kBAAC,IAAD,CAAOjB,MAAOhB,EAAaqC,UAAW,CAACJ,QAASxB,IAExC,YAA6B,IAA3BQ,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MACb,OAAGF,EAAgB,yCAChBE,EAAc,qCACdD,EAGK,6BACI,kBAAC,EAAD,KACI,kBAACQ,EAAD,CAAOY,IAAKpB,EAAKI,MAAMG,qBACvB,8BACI,kBAAC,EAAD,KAAQP,EAAKI,MAAMZ,OACnB,kBAACmB,EAAD,CAAWC,MAAI,GAAf,WAAyBZ,EAAKI,MAAMX,QACpC,kBAACkB,EAAD,KAAYX,EAAKI,MAAMiB,qBAG/B,kBAAC,EAAD,kBACA,kBAACR,EAAD,KACKb,EAAKsB,YAAYnB,IAAI,SAAAC,GAAK,OAC3B,kBAAC,EAAD,CACIC,IAAKD,EAAMb,GACXA,GAAIa,EAAMb,GACVC,MAAOY,EAAME,WACbb,OAAQW,EAAMX,OACdC,OAAQU,EAAMG,8BApBlC,KC9BLgB,E,iLAXX,OACE,kBAAC,IAAD,CAAQC,SAAS,KACf,kBAAC,IAAD,CAAgB/C,OAAQA,GACtB,kBAAC,IAAD,CAAOgD,OAAO,EAAMC,KAAM,IAAKC,UAAW9B,IAC1C,kBAAC,IAAD,CAAO6B,KAAM,oBAAqBC,UAAWb,U,GANrCc,IAAMC,W,wWCJGC,4BAAH,IAEpBC,KCAJC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.c9fe24d0.chunk.js","sourcesContent":["import ApolloClient from 'apollo-boost';\r\n\r\nconst client = new ApolloClient({\r\n    //uri: \"https://movieql.now.sh/\"\r\n    uri: \"http://localhost:4000/\"\r\n});\r\n\r\nexport default client;","import gql from 'graphql-tag';\r\n\r\nexport const HOME_PAGE = gql`\r\n    query {\r\n        movies(genre: \"Romance\", rating: 7, limit: 50){\r\n            id\r\n            title_long\r\n            rating\r\n            genres\r\n            medium_cover_image\r\n            }\r\n        }\r\n`;\r\n\r\n//getMovieDetails : apollo에서 사용하려고 이름 붙이는 것, not for graphql\r\n// -> 어떤 종류의 변수를 쿼리에게 주는지 알려줘야 하기 때문 \r\nexport const DETAIL_PAGE = gql`\r\n    query getMovieDetails($movieId: Int!){\r\n        movie(id: $movieId){\r\n            medium_cover_image\r\n            title_long\r\n            rating\r\n            description_intro\r\n            language\r\n            genres\r\n        }\r\n        suggestions(id: $movieId) {\r\n            id\r\n            medium_cover_image\r\n            title_long\r\n            rating\r\n        }\r\n    }\r\n\r\n\r\n`;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Card = styled.div`\r\n  border-radius: 15px;\r\n  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.19), 0 6px 6px rgba(0, 0, 0, 0.23);\r\n  background-image: ${props => `url(${props.background})`};\r\n  background-size: cover;\r\n  background-position: center center;\r\n  height: 300px;\r\n  width: 200px;\r\n  margin-bottom: 40px;\r\n  position: relative;\r\n`;\r\n\r\nconst Title = styled.span`\r\n  background-color: white;\r\n  width: auto;\r\n  padding: 10px;\r\n  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.19), 0 6px 6px rgba(0, 0, 0, 0.23);\r\n  position: absolute;\r\n  bottom: 25px;\r\n  left: 0;\r\n  right: 0;\r\n  margin: auto;\r\n`;\r\n\r\nconst Movie = ({ id, title, rating, poster }) => (\r\n  <Link to={`/details/${id}`}>\r\n    <Card background={poster}>\r\n      <Title>\r\n        {title} / {rating}⭐️\r\n      </Title>\r\n    </Card>\r\n  </Link>\r\n);\r\n\r\nMovie.propTypes = {\r\n  id: PropTypes.number.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  rating: PropTypes.number.isRequired,\r\n  poster: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Movie;","import React from \"react\";\r\nimport {Query} from 'react-apollo';\r\nimport { HOME_PAGE } from './queries';\r\nimport styled from \"styled-components\";\r\nimport Movie from \"./Movie\";\r\n\r\nconst Container = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 0.7fr);\r\n  flex-wrap: wrap;\r\n  justify-items: center;\r\n`;\r\n\r\nconst Home = () => (\r\n        <Query query={HOME_PAGE}>\r\n        {\r\n            ({ loading, data, error}) => {\r\n        if(loading) return <h3>Loading</h3>;\r\n        if(error) return <h3>Error</h3>;\r\n        if(data){\r\n            return <Container>\r\n            {data.movies.map(movie => (\r\n                <Movie \r\n                key={movie.id} \r\n                id={movie.id }\r\n                title={movie.title_long}\r\n                poster={movie.medium_cover_image}\r\n                rating={movie.rating} \r\n                />\r\n            ))}</Container>;\r\n        }}\r\n        }  \r\n        </Query>\r\n    );\r\n\r\nexport default Home;","import React from \"react\";\r\nimport { Query } from 'react-apollo';\r\nimport { DETAIL_PAGE } from './queries';\r\nimport Movie from \"./Movie\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 4fr;\r\n  margin-bottom: 50px;\r\n  padding: 50px;\r\n`;\r\n\r\nconst Card = styled.div`\r\n  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.19), 0 6px 6px rgba(0, 0, 0, 0.23);\r\n  background-color: white;\r\n  border-radius: 7px;\r\n`;\r\n\r\nconst Image = Card.withComponent(\"img\");\r\n\r\nconst Title = styled.h1`\r\n  font-size: 24px;\r\n  margin-bottom: 10px;\r\n  margin-left: 50px;\r\n`;\r\n\r\nconst Paragraph = styled.span`\r\n  margin-bottom: 10px;\r\n  display: block;\r\n  font-weight: ${props => (props.bold ? \"500\" : \"400\")};\r\n`;\r\n\r\nconst MovieContainer = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 0.7fr);\r\n  flex-wrap: wrap;\r\n  justify-items: center;\r\n  margin-top: 50px;\r\n`;\r\n\r\nconst Detail = ({ match: { params: { movieId } } }) => {\r\n    let id = parseInt(movieId);\r\n\r\n    return(\r\n        <Query query={DETAIL_PAGE} variables={{movieId: id}}> \r\n            { \r\n                ({loading, data, error}) => {\r\n                    if(loading) return <h3>Loading..</h3>\r\n                    if(error) return <h3>Error</h3>\r\n                    if(data){\r\n                        \r\n                        return (\r\n                            <div>\r\n                                <Container>\r\n                                    <Image src={data.movie.medium_cover_image} />\r\n                                    <span>\r\n                                        <Title>{data.movie.title}</Title>\r\n                                        <Paragraph bold>Rating: {data.movie.rating}</Paragraph>\r\n                                        <Paragraph>{data.movie.description_intro}</Paragraph>\r\n                                    </span>\r\n                                </Container>\r\n                                <Title>Suggested</Title>\r\n                                <MovieContainer>\r\n                                    {data.suggestions.map(movie => (\r\n                                    <Movie\r\n                                        key={movie.id}\r\n                                        id={movie.id}\r\n                                        title={movie.title_long}\r\n                                        rating={movie.rating}\r\n                                        poster={movie.medium_cover_image}\r\n                                    />\r\n                                    ))}\r\n                                </MovieContainer>\r\n                            </div>\r\n                        );\r\n                    }\r\n                }     \r\n            }\r\n        </Query>\r\n    );\r\n};\r\n\r\nexport default Detail;","import React from 'react';\nimport { HashRouter as Router, Route } from 'react-router-dom';\nimport {ApolloProvider} from 'react-apollo';\nimport client from './apolloClient';\nimport Home from './Home';\nimport Detail from './Detail';\n\nclass App extends React.Component {\n  render(){\n    return (\n      <Router basename=\"/\">\n        <ApolloProvider client={client}>\n          <Route exact={true} path={\"/\"} component={Home} />\n          <Route path={\"/details/:movieId\"} component={Detail} />\n        </ApolloProvider>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","import { createGlobalStyle } from \"styled-components\";\r\nimport reset from \"styled-reset\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  @import url('https://fonts.googleapis.com/css?family=Maven+Pro');\r\n  ${reset};\r\n  body{\r\n    font-family: 'Maven Pro', sans-serif;\r\n    background-color: #ecf0f1;\r\n  }\r\n  a{\r\n      color:inherit;\r\n  }\r\n  main {\r\n    width: 80%;\r\n    margin: 0 auto;\r\n    padding: 20px;\r\n  }\r\n`;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport \"./globalStyles\";\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n"],"sourceRoot":""}